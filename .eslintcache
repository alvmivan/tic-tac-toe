[{"C:\\Users\\alvmi\\WebstormProjects\\tic-tac-toe\\src\\index.js":"1","C:\\Users\\alvmi\\WebstormProjects\\tic-tac-toe\\src\\GameLoop.js":"2","C:\\Users\\alvmi\\WebstormProjects\\tic-tac-toe\\src\\Game.js":"3","C:\\Users\\alvmi\\WebstormProjects\\tic-tac-toe\\src\\TikTakToeService.js":"4","C:\\Users\\alvmi\\WebstormProjects\\tic-tac-toe\\src\\Board.js":"5","C:\\Users\\alvmi\\WebstormProjects\\tic-tac-toe\\src\\Local.js":"6","C:\\Users\\alvmi\\WebstormProjects\\tic-tac-toe\\src\\PengineClient.js":"7","C:\\Users\\alvmi\\WebstormProjects\\tic-tac-toe\\src\\Square.js":"8","C:\\Users\\alvmi\\WebstormProjects\\tic-tac-toe\\src\\SelectDifficulty.js":"9"},{"size":255,"mtime":1618831275606,"results":"10","hashOfConfig":"11"},{"size":3509,"mtime":1618836167181,"results":"12","hashOfConfig":"11"},{"size":3513,"mtime":1618835578991,"results":"13","hashOfConfig":"11"},{"size":2329,"mtime":1618831275606,"results":"14","hashOfConfig":"11"},{"size":632,"mtime":1618831275606,"results":"15","hashOfConfig":"11"},{"size":851,"mtime":1618834955852,"results":"16","hashOfConfig":"11"},{"size":2288,"mtime":1618794169126,"results":"17","hashOfConfig":"11"},{"size":942,"mtime":1618831275606,"results":"18","hashOfConfig":"11"},{"size":1568,"mtime":1618842594422,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"tqk7kf",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\alvmi\\WebstormProjects\\tic-tac-toe\\src\\index.js",[],["40","41"],"C:\\Users\\alvmi\\WebstormProjects\\tic-tac-toe\\src\\GameLoop.js",[],"C:\\Users\\alvmi\\WebstormProjects\\tic-tac-toe\\src\\Game.js",["42","43"],"import React from 'react';\r\nimport Board from './Board';\r\nimport {getText} from \"./Local\";\r\nimport {\r\n    currentPlayingStatus, debug,\r\n    emptyToken,\r\n    gameState,\r\n    onPlayerClicks,\r\n    oToken,\r\n    resetGame,\r\n    tieStatus,\r\n    xToken\r\n} from \"./GameLoop\";\r\nimport {SelectDifficulty} from \"./SelectDifficulty\";\r\n\r\n\r\nconst classes = {\r\n    playAgain: \"playAgain\",\r\n    playAgainBig: \"playAgainBig\",\r\n    gameTittle: \"gameTittle\",\r\n    gameInfo: \"gameInfo\",\r\n    game: \"game\"\r\n}\r\n\r\nconst winningLines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6]\r\n];\r\n\r\n\r\nclass Game extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.setState({...gameState})\r\n        gameState.onChange = () => this.setState({...gameState});\r\n    }\r\n\r\n    getWinningLine(token) {\r\n\r\n        for (let i = 0; i < winningLines.length; i++) {\r\n            const line = winningLines[i];\r\n            let [a, b, c] = line;\r\n            let board = gameState.squares;\r\n            if (board[a] === token && board[b] === token && board[c] === token) {\r\n                return line;\r\n            }\r\n        }\r\n        return []\r\n    }\r\n    getStatusTextAndWinningArray() {\r\n        let statusText;\r\n        let winning = [];\r\n        switch (gameState.status) {\r\n            case currentPlayingStatus:\r\n                statusText = gameState.turnX ? xToken : oToken\r\n                break;\r\n            case tieStatus:\r\n                statusText = getText(\"tie\");\r\n                break;\r\n            default: // not tie or in progress implies someone won\r\n                winning = this.getWinningLine(gameState.status);\r\n                statusText = getText(\"winner\", [gameState.status]);\r\n                break;\r\n        }\r\n        return {statusText, winning};\r\n    }\r\n\r\n    handleClick(movementIndex) {\r\n        onPlayerClicks(movementIndex)\r\n    }\r\n\r\n    handleDifficulty(difficulty) {\r\n        gameState.difficulty = difficulty;\r\n        let {_, winning} = this.getStatusTextAndWinningArray();\r\n        resetGame(winning);\r\n    }\r\n\r\n    render() {\r\n        let {statusText, winning} = this.getStatusTextAndWinningArray();\r\n\r\n\r\n        return (\r\n            <div className={classes.game}>\r\n                <SelectDifficulty\r\n                    difficulty={gameState.difficulty}\r\n                    onSelectDifficulty={(d)=>this.handleDifficulty(d)}\r\n                />\r\n\r\n                <div className={classes.gameTittle}>\r\n                    {getText(\"tittle\")}\r\n                </div>\r\n                <div/>\r\n                <div className={classes.gameInfo}>\r\n                    {statusText}\r\n                </div>\r\n                <div/>\r\n                <Board\r\n                    ends={gameState.status !== currentPlayingStatus}\r\n                    squares={gameState.squares}\r\n                    onClick={i => this.handleClick(i)}\r\n                    winning={winning}\r\n                />\r\n\r\n                <button\r\n                    className={gameState.status === tieStatus ? classes.playAgain : classes.playAgainBig}\r\n                    onClick={() => resetGame(winning)}>\r\n                    {getText(\"reset\")}\r\n                </button>\r\n\r\n\r\n                <div className={classes.gameInfo}>\r\n                    {debug ? \"DEBUG STATE : \" + JSON.stringify(gameState, null, 2) : \"\"}\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nexport default Game;\r\n","C:\\Users\\alvmi\\WebstormProjects\\tic-tac-toe\\src\\TikTakToeService.js",[],"C:\\Users\\alvmi\\WebstormProjects\\tic-tac-toe\\src\\Board.js",[],"C:\\Users\\alvmi\\WebstormProjects\\tic-tac-toe\\src\\Local.js",[],"C:\\Users\\alvmi\\WebstormProjects\\tic-tac-toe\\src\\PengineClient.js",[],"C:\\Users\\alvmi\\WebstormProjects\\tic-tac-toe\\src\\Square.js",[],"C:\\Users\\alvmi\\WebstormProjects\\tic-tac-toe\\src\\SelectDifficulty.js",["44","45","46","47"],{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","severity":1,"message":"53","line":6,"column":5,"nodeType":"54","messageId":"55","endLine":6,"endColumn":15},{"ruleId":"52","severity":1,"message":"56","line":81,"column":14,"nodeType":"54","messageId":"55","endLine":81,"endColumn":15},{"ruleId":"52","severity":1,"message":"57","line":1,"column":8,"nodeType":"54","messageId":"55","endLine":1,"endColumn":16},{"ruleId":"52","severity":1,"message":"58","line":3,"column":17,"nodeType":"54","messageId":"55","endLine":3,"endColumn":23},{"ruleId":"52","severity":1,"message":"59","line":3,"column":25,"nodeType":"54","messageId":"55","endLine":3,"endColumn":40},{"ruleId":"52","severity":1,"message":"60","line":3,"column":42,"nodeType":"54","messageId":"55","endLine":3,"endColumn":50},"no-native-reassign",["61"],"no-negated-in-lhs",["62"],"no-unused-vars","'emptyToken' is defined but never used.","Identifier","unusedVar","'_' is assigned a value but never used.","'ReactDOM' is defined but never used.","'useRef' is defined but never used.","'useLayoutEffect' is defined but never used.","'useState' is defined but never used.","no-global-assign","no-unsafe-negation"]